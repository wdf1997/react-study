// 变量
@background: pink;

.test-Operations-1 {
    background-color: @background;
}

.test-Operations-2 {
    @background: yellowgreen;
    background-color: @background;
}

// url变量
@images: "./img";

.test-url {
    color: #444;
    height: 200px;
    background: url("@{images}/img.jpg");
}

// 选择器变量
@selector: banner;

.@{selector} {
    background: orangered;
    font-weight: bold;
    border: 1px solid @theme-color;
}

// 属性变量
@property: color;

.widget {
    @{property}: orange;
    background-@{property}: pink;
}

// 可变变量
@primary: green;
@secondary: blue;

.section {
    @color: @secondary;

    .element {
        color: @color;
    }
}

// 懒惰评估
.lazy {
    background: @var;
    @a: green;
}

@var: @a;
@a: pink;

// 使用内部属性作为变量
.prop {
    color: rgb(245, 122, 143);
    background-color: $color;
    color: rgb(248, 166, 98);
}

// library  darken是less里降低亮度的函数，
//darken(color: 颜色, amount：它包含0 - 100%之间的百分比, 方法：它是可选参数，通过将其设置为相对，用于相对于当前值进行调整)
@base-color: green;
@dark-color: darken(@base-color, 20%);
@base-color: red;

.base {
    background: @dark-color;
}

// 混合
.bordered {
    border: solid 2px blueviolet;
}

.menu {
    padding: 10px;
    .bordered()
}

.my-mixin {
    color: blueviolet;
}

.my-other-mixin {
    background-color: pink;
}

.class {
    .my-mixin();
    .my-other-mixin();
}

.my-hover-mixin() {
    &:hover {
        border: 2px solid green;
    }
}

.button {
    background-color: pink;
    .my-hover-mixin()
}

#outer() {
    .inner {
        color: red;
    }
}
.c {
    border:1px solid #000;
    //#outer>.inner();
    #outer();
}

@mode: huge;
// .mixin() {
//     background: green;
// }
.namespace when (@mode = huge) {
    .mixin {
        background: green;
    };
    // .mixin();
}
.namespace {
    width: 80%;
    .mixin when (@mode = huge) {
        background: green;
     }
}

.foo (@bg: #fcc5d7, @color: #b46cf8) {
    background: @bg;
    color: @color;
  }
  .unimportant {
    .foo();
    background: green;
  }
  .important {
    .foo() !important;
    background: green;
  }

  .border-radius(@radius: 5px) {
      border: 2px solid #b46cf8;
      margin-bottom: 5px;
    -webkit-border-radius: @radius;
       -moz-border-radius: @radius;
            border-radius: @radius;
  }
  .header {
    .border-radius(4px);
  }
  .butt {
    .border-radius(6px);
  }
  .default {
    .border-radius();
  }
 // 多个混合参数
  .mixina(@color) {
    color: @color;
  }
  .mixina(@color; @padding: 2px) {
    border:1px solid @color;
    padding: @padding;
  }
  .mixina(@color; @padding; @margin: 2px) {
    color: @color;
    padding: @padding;
    margin: @margin;
  }
  .some {
    .mixina(#6141ee)
  }
 // 命名参数
  .mixinb(@color: blue; @margin: 10px; @padding: 5px) {
    color: @color;
    margin: @margin;
    padding: @padding;
    border: 1px solid @color;
  }
  .class1 {
    .mixinb(@margin: 20px; @color: green);
  }
  .class2 {
    .mixinb(yellow; @padding: 20px);
  }
  .class3 {
      .mixinb(pink, 20px, 10px)
  }

  // @arguments
  .box-shadow(@x: 0; @y: 0; @blur: 1px; @color: #464646) {
    -webkit-box-shadow: @arguments;
       -moz-box-shadow: @arguments;
            box-shadow: @arguments;
  }
  .class4 {
      border: 1px solid pink;
    .box-shadow(1px; 1px; 3px);
  }

  // 模式匹配
  .mixinc(dark; @color) {
    background: darken(@color, 10%);
  }
  .mixinc(light; @color) {
    background: lighten(@color, 20%);
  }
  .mixinc(@_; @color) {
    border: 1px solid;
  }
  .class5 {
    .mixinc(light; #f72346)
  }

  // 作为函数
  .average(@x, @y) {
    @result: ((@x + @y) / 2);
  }
  .class6 {
    // call a mixin and look up its "@result" value
    padding: .average(16px, 50px)[@result];
    border: 1px solid;
  }

  // 未命名的查询
  .aver(@x, @y) {
    @result1: ((@x + @y) / 2);
    @result2: ((@x - @y) / 2);
    // background-color: pink;
  }
  .class7 {
    // call a mixin and look up its final value
    padding: .aver(50px, 16px)[];
    border: 1px solid;
  }

  .mixind() {
    @backcolor:  pink;
    @fontcolor: blue;
  }
  .caller {
    .mixind();
    background: @backcolor;
    color: @fontcolor;
  }
  @backcolor: green;

  .unlock(@value) { // outer mixin
    background-color: purple;
    .doSomething() { // nested mixin
      background: @value;
    }
  }
  .class8 {
    .unlock(pink); // unlock doSomething mixin
    .doSomething(); //nested mixin was copied here and is usable
  }
// 递归混合
  .loop(@counter) when (@counter > 0) {
    .loop((@counter - 1));    // next iteration
    width: (10px * @counter); // code for each iteration
    background: green;
  }
  .class9 {
    .loop(5); // launch the loop
  }

.generate-columns(4);
.generate-columns(@n, @i: 1) when (@i =< @n) {
  .div-@{i} {
    width: (@i * 100% / @n);
    background: yellowgreen;
    margin-bottom: 2px;
  }
  .generate-columns(@n, (@i + 1));
}
// mixin group
.mixine(@a) when (lightness(@a) >= 50%) {
  background-color: black;
}
.mixine(@a) when (lightness(@a) < 50%) {
  background-color: white;
}
.mixine(@a) {
  color: @a;
}
.class10 { .mixine(#ddd) }
.class11 { .mixine(#555) }

#theme.dark.navbar {
  .colors(light) {
    primary: purple;
  }
  .colors(dark) {
    primary: black;
    secondary: grey;
  }
}

.navbar {
  @colors: #theme.dark.navbar.colors(dark);
  background: @colors[primary];
  border: 1px solid @colors[secondary];
}
#library() {
  .rules() {
    background: green;
  }
}
.box {
  @alias: #library.rules();
  @alias();
}
.box {
  @alias: #library.rules;
  @{alias} {
    color: red;
  };
}
// 嵌套
.nest {
  color: blue;
  &:hover {
    color: green;
  }
}
.nest {
  &-1 {
    background: #8a2be2;
  }
  &-2 {
    background: #ff7f50;
  }
}

.link {
  & + & {
    color: red;
  }

  & & {
    color: green;
  }

  && {
    color: blue;
  }

  &, &ish {
    color: cyan;
  }
}

.grand {
  .parent {
    & > & {
      color: red;
    }

    & & {
      color: green;
    }

    && {
      color: blue;
    }

    &, &ish {
      color: pink;
    }
  }
}

.link {
  .menu {
    background: #f86767;
    .parent & {
      background: #6b20b2;
    }
  }
}

nav div {
  &:extend(.inline);
  //.inline;
  background: green;
}
.inline {
  color: #6b20b2;
}

.big-division,
.big-bag:extend(.bag),
.big-bucket:extend(.bucket) {
  background: pink;
}
.bag {
  color: green;
}
.bucket {
  color: blue;
}